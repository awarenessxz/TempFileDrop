###############################################################################################
# Server Configuration
###############################################################################################

server.port: 7001

spring:
  profiles.active: dev
  application.name: tempfiledrop-webserver

tempfiledrop:
  bucket-name: tempfiledrop
  storagesvc-url: http://localhost:8001
---

###############################################################################################
# Mongo DB Configuration
###############################################################################################

spring.data.mongodb.uri: mongodb://service_user:service_pass@localhost:27017/webDB?authSource=admin

---

###############################################################################################
# Rabbit MQ Configuration
###############################################################################################

spring:
  rabbitmq:
    addresses: localhost:5672
    username: storage_subscriber
    password: storage123
  cloud:
    function:
      definition: storageSvcChannel
    stream:
      rabbit.bindings:
        storageSvcChannel-in-0.consumer:
          binding-routing-key-delimiter: ","
          binding-routing-key: tempfiledrop
          bind-queue: false                   # Disable queue binding for access control
          declare-exchange: false             # Disable exchange creation for access control
      bindings:
        storageSvcChannel-in-0:               # queue name = destination.group = storageSvcExchange.tempfiledrop
          destination: storageSvcExchange     # mapping cloud stream output channel to rabbitmq exchange
          group: tempfiledrop                 # only 1 instance in consumer group will receive message (should be unique to your app)
---

###############################################################################################
# Keycloak Configuration
###############################################################################################

keycloak:
  auth-server-url: http://localhost:8080/auth
  realm: storage
  resource: tempfiledrop-webserver              # client
  principal-attribute: preferred_username       # map the Principal name with our Keycloak username
  bearer-only: true                             # the adapter will not attempt to authenticate users, but only verify bearer tokens.
  public-client: false                          # this is not client side application
  use-resource-role-mappings: true              # use client roles
